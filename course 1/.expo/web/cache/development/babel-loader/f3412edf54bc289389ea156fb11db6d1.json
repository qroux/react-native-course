{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\n\nvar _this = this,\n    _jsxFileName = \"/home/qr/code/code perso/react-native-course/course 1/src/screens/ColorPickerScreen.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { useState, useReducer } from \"react\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport FlatList from \"react-native-web/dist/exports/FlatList\";\nimport PickerButton from \"../components/PickerButton\";\n\nvar reducer = function reducer(state, action) {\n  switch (action.colorToChange) {\n    case \"red\":\n      return state.red + action.amount > 255 || state.red + action.amount < 0 ? _objectSpread({}, state) : _objectSpread(_objectSpread({}, state), {}, {\n        red: state.red + action.amount\n      });\n\n    case \"green\":\n      return _objectSpread(_objectSpread({}, state), {}, {\n        green: state.green + action.amount\n      });\n\n    case \"blue\":\n      return _objectSpread(_objectSpread({}, state), {}, {\n        blue: state.blue + action.amount\n      });\n\n    default:\n      return state;\n  }\n};\n\nvar ColorPickerScreen = function ColorPickerScreen() {\n  var _useReducer = useReducer(reducer, {\n    red: 0,\n    green: 0,\n    blue: 0\n  }),\n      _useReducer2 = _slicedToArray(_useReducer, 2),\n      state = _useReducer2[0],\n      dispatch = _useReducer2[1];\n\n  return React.createElement(View, {\n    style: {\n      flex: 1\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 5\n    }\n  }, React.createElement(Text, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 7\n    }\n  }, \"Color Picker\"), React.createElement(PickerButton, {\n    str: \"red\",\n    dispatch: dispatch,\n    state: state,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 7\n    }\n  }), React.createElement(PickerButton, {\n    str: \"green\",\n    dispatch: dispatch,\n    state: state,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 7\n    }\n  }), React.createElement(PickerButton, {\n    str: \"blue\",\n    dispatch: dispatch,\n    state: state,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 7\n    }\n  }), React.createElement(View, {\n    style: style.colorsContainer,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 7\n    }\n  }, React.createElement(View, {\n    style: [style.square, {\n      backgroundColor: \"rgb(\" + state.red + \", \" + state.green + \", \" + state.blue + \")\"\n    }],\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 9\n    }\n  }), React.createElement(Text, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 9\n    }\n  }, state.red + \", \" + state.green + \", \" + state.blue)));\n};\n\nvar style = StyleSheet.create({\n  colorsContainer: {\n    paddingVertical: 30,\n    height: 200,\n    borderColor: \"rgba(212, 212, 212, 0.5)\",\n    borderWidth: 0.7\n  },\n  square: {\n    height: 100,\n    width: 100,\n    marginHorizontal: 10,\n    borderColor: \"rgba(212, 212, 212, 0.5)\",\n    borderWidth: 0.5\n  }\n});\nexport default ColorPickerScreen;","map":{"version":3,"sources":["/home/qr/code/code perso/react-native-course/course 1/src/screens/ColorPickerScreen.js"],"names":["React","useState","useReducer","PickerButton","reducer","state","action","colorToChange","red","amount","green","blue","ColorPickerScreen","dispatch","flex","style","colorsContainer","square","backgroundColor","StyleSheet","create","paddingVertical","height","borderColor","borderWidth","width","marginHorizontal"],"mappings":"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","sourcesContent":["import React, { useState, useReducer } from \"react\";\nimport {\n  View,\n  Text,\n  StyleSheet,\n  TouchableOpacity,\n  FlatList,\n} from \"react-native\";\n\nimport PickerButton from \"../components/PickerButton\";\n\nconst reducer = (state, action) => {\n  switch (action.colorToChange) {\n    case \"red\":\n      return state.red + action.amount > 255 || state.red + action.amount < 0\n        ? { ...state }\n        : { ...state, red: state.red + action.amount };\n    case \"green\":\n      return { ...state, green: state.green + action.amount };\n    case \"blue\":\n      return { ...state, blue: state.blue + action.amount };\n    default:\n      return state;\n  }\n};\n\nconst ColorPickerScreen = () => {\n  // const [red, setRed] = useState(0)\n  // const [green, setGreen] = useState(0)\n  // const [blue, setBlue] = useState(0)\n\n  const [state, dispatch] = useReducer(reducer, { red: 0, green: 0, blue: 0 });\n\n  return (\n    <View style={{ flex: 1 }}>\n      <Text>Color Picker</Text>\n      <PickerButton str=\"red\" dispatch={dispatch} state={state} />\n      <PickerButton str=\"green\" dispatch={dispatch} state={state} />\n      <PickerButton str=\"blue\" dispatch={dispatch} state={state} />\n      <View style={style.colorsContainer}>\n        <View\n          style={[\n            style.square,\n            {\n              backgroundColor: `rgb(${state.red}, ${state.green}, ${state.blue})`,\n            },\n          ]}\n        ></View>\n        <Text>{`${state.red}, ${state.green}, ${state.blue}`}</Text>\n      </View>\n    </View>\n  );\n};\n\nconst style = StyleSheet.create({\n  colorsContainer: {\n    paddingVertical: 30,\n    height: 200,\n    borderColor: \"rgba(212, 212, 212, 0.5)\",\n    borderWidth: 0.7,\n  },\n  square: {\n    height: 100,\n    width: 100,\n    marginHorizontal: 10,\n    borderColor: \"rgba(212, 212, 212, 0.5)\",\n    borderWidth: 0.5,\n  },\n});\n\nexport default ColorPickerScreen;\n"]},"metadata":{},"sourceType":"module"}